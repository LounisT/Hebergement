@model HebergementViewModel
@using HebergementManager.Web.Services

@{
    ViewData["Title"] = Model.Nom;
    var types = ViewBag.TypeHebergements as List<TypeHebergementDto>;
    var typeNom = types?.FirstOrDefault(t => t.Id == Model.TypeHebergementId)?.Nom ?? "Non spécifié";
}

<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-8">
    <div class="px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <a asp-action="Index"
                       class="inline-flex items-center text-indigo-600 hover:text-indigo-700 font-medium mb-4">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                        Retour à la liste
                    </a>
                    <h1 class="text-3xl font-bold text-gray-900">@Model.Nom</h1>
                    <div class="mt-2 flex items-center space-x-4">
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                            @typeNom
                        </span>
                        @if (Model.EstActif)
                        {
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                </svg>
                                Disponible
                            </span>
                        }
                        else
                        {
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                                Indisponible
                            </span>
                        }
                    </div>
                </div>
                <div class="flex space-x-3">
                    <a asp-action="Edit" asp-route-id="@Model.Id"
                       class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Modifier
                    </a>
                </div>
            </div>
        </div>

        <!-- Contenu principal -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Informations détaillées (2/3) -->
            <div class="lg:col-span-2 space-y-6">
                <!-- Photos placeholder -->
                <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6">
                    <div class="aspect-video bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl flex items-center justify-center">
                        <div class="text-center text-gray-500">
                            <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <p class="text-lg font-medium">Photos de l'hébergement</p>
                            <p class="text-sm">Ajoutez des photos pour améliorer l'attractivité</p>
                        </div>
                    </div>
                </div>

                <!-- Description -->
                <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-4">Description</h2>
                    <p class="text-gray-700 leading-relaxed">@Model.Description</p>
                </div>

                <!-- Informations détaillées -->
                <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Informations</h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Localisation -->
                        <div class="space-y-4">
                            <h3 class="text-lg font-medium text-gray-900 flex items-center">
                                <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                Localisation
                            </h3>
                            <div class="space-y-2 text-gray-600">
                                <p>@Model.Adresse</p>
                                <p>@Model.CodePostal @Model.Ville</p>
                            </div>
                        </div>

                        <!-- Caractéristiques -->
                        <div class="space-y-4">
                            <h3 class="text-lg font-medium text-gray-900 flex items-center">
                                <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                Caractéristiques
                            </h3>
                            <div class="space-y-3">
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-600">Type</span>
                                    <span class="font-medium">@typeNom</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-600">Capacité</span>
                                    <span class="font-medium">@Model.CapaciteMax personnes</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-gray-600">Prix par nuit</span>
                                    <span class="font-medium text-lg text-indigo-600">@Model.PrixFormate</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Équipements -->
                <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Équipements</h2>

                    @{
                        var equipements = ViewBag.Equipements as List<CategorieEquipementDto>;
                    }

                    @if (equipements != null && equipements.Any())
                    {
                        foreach (var categorie in equipements)
                        {
                            var equipementsCategorie = categorie.Equipements?.Where(e => Model.EquipementIds != null && Model.EquipementIds.Contains(e.Id)).ToList() ?? new List<EquipementDto>();

                            <div class="mb-6 last:mb-0">
                                <h3 class="font-medium text-gray-900 mb-3">@categorie.CategorieNom</h3>
                                @if (equipementsCategorie.Any())
                                {
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                                        @foreach (var equipement in equipementsCategorie)
                                        {
                                            <div class="flex items-center space-x-3">
                                                <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                                </svg>
                                                <span class="text-gray-700">@equipement.Nom</span>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500 italic">Aucun équipement dans cette catégorie</p>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-gray-500 text-center py-4">Aucune catégorie d'équipement disponible</p>
                    }
                </div>
            </div>

            <!-- Sidebar réservation (1/3) -->
            <div class="lg:col-span-1">
                <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6 sticky top-8">
                    <!-- Prix -->
                    <div class="text-center mb-6">
                        <div class="text-3xl font-bold text-gray-900">@Model.PrixFormate</div>
                        <div class="text-gray-600">par nuit</div>
                    </div>

                    <!-- Formulaire de réservation -->
                    <form id="reservationForm" class="space-y-4">
                        <input type="hidden" name="hebergementId" value="@Model.Id" />

                        <!-- Dates -->
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Arrivée</label>
                                <input type="date" name="dateArrivee" id="dateArrivee" required
                                       class="w-full px-3 py-2 border border-gray-200 rounded-lg bg-white/80 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all text-sm" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Départ</label>
                                <input type="date" name="dateDepart" id="dateDepart" required
                                       class="w-full px-3 py-2 border border-gray-200 rounded-lg bg-white/80 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all text-sm" />
                            </div>
                        </div>

                        <!-- Nombre de personnes -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Voyageurs</label>
                            <select name="nombrePersonnes" required
                                    class="w-full px-3 py-2 border border-gray-200 rounded-lg bg-white/80 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all text-sm">
                                <option value="">Sélectionnez</option>
                                @for (int i = 1; i <= Model.CapaciteMax; i++)
                                {
                                    <option value="@i">@i @(i == 1 ? "personne" : "personnes")</option>
                                }
                            </select>
                        </div>

                        <!-- Calendrier -->
                        <div class="mt-6">
                            <h3 class="text-sm font-medium text-gray-700 mb-3">Disponibilités</h3>
                            <div id="calendar" class="bg-white rounded-lg border border-gray-200 p-4">
                                <!-- Le calendrier sera généré par JavaScript -->
                            </div>
                        </div>

                        <!-- Résumé de la réservation -->
                        <div id="reservationSummary" class="hidden mt-6 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
                            <h4 class="font-medium text-indigo-900 mb-2">Résumé de la réservation</h4>
                            <div class="space-y-1 text-sm text-indigo-800">
                                <div class="flex justify-between">
                                    <span>Nombre de nuits :</span>
                                    <span id="nombreNuits">-</span>
                                </div>
                                <div class="flex justify-between">
                                    <span>Prix par nuit :</span>
                                    <span>@Model.PrixFormate</span>
                                </div>
                                <hr class="border-indigo-300 my-2">
                                <div class="flex justify-between font-medium">
                                    <span>Total :</span>
                                    <span id="prixTotal">-</span>
                                </div>
                            </div>
                        </div>

                        <!-- Bouton de réservation -->
                        <button type="submit"
                                class="w-full py-3 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                                disabled>
                            <span class="flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                Réserver maintenant
                            </span>
                        </button>
                    </form>

                    <!-- Contact -->
                    <div class="mt-6 pt-6 border-t border-gray-200">
                        <div class="text-center">
                            <p class="text-sm text-gray-600 mb-3">Une question ?</p>
                            <button type="button"
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                </svg>
                                Contacter l'hôte
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const prixParNuit = @Model.PrixParNuit;

        // Configuration du calendrier
        document.addEventListener('DOMContentLoaded', function() {
            initCalendar();
            setupDateValidation();
            setupReservationCalculation();
        });

        function initCalendar() {
            const calendar = document.getElementById('calendar');
            const currentDate = new Date();
            const currentMonth = currentDate.getMonth();
            const currentYear = currentDate.getFullYear();

            // Générer le calendrier pour ce mois
            generateCalendar(currentMonth, currentYear);
        }

        function generateCalendar(month, year) {
            const calendar = document.getElementById('calendar');
            const monthNames = [
                "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
                "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
            ];

            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const firstDay = new Date(year, month, 1).getDay();
            const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1; // Lundi = 0

            let calendarHTML = `
                <div class="flex justify-between items-center mb-4">
                    <button type="button" onclick="changeMonth(-1)" class="p-1 hover:bg-gray-100 rounded">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                        </svg>
                    </button>
                    <h4 class="font-medium">${monthNames[month]} ${year}</h4>
                    <button type="button" onclick="changeMonth(1)" class="p-1 hover:bg-gray-100 rounded">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                    </button>
                </div>
                <div class="grid grid-cols-7 gap-1 text-center text-xs font-medium text-gray-600 mb-2">
                    <div>L</div><div>M</div><div>M</div><div>J</div><div>V</div><div>S</div><div>D</div>
                </div>
                <div class="grid grid-cols-7 gap-1">
            `;

            // Cellules vides pour les jours du mois précédent
            for (let i = 0; i < adjustedFirstDay; i++) {
                calendarHTML += '<div class="h-8"></div>';
            }

            // Jours du mois
            const today = new Date();
            for (let day = 1; day <= daysInMonth; day++) {
                const date = new Date(year, month, day);
                const isToday = date.toDateString() === today.toDateString();
                const isPast = date < today;

                let classes = 'h-8 w-8 flex items-center justify-center text-xs rounded cursor-pointer hover:bg-indigo-100';

                if (isPast) {
                    classes += ' text-gray-300 cursor-not-allowed';
                } else if (isToday) {
                    classes += ' bg-indigo-600 text-white font-medium';
                } else {
                    classes += ' text-gray-700 hover:bg-indigo-50';
                }

                calendarHTML += `<div class="${classes}" ${!isPast ? `onclick="selectDate('${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}')"` : ''}>${day}</div>`;
            }

            calendarHTML += '</div>';
            calendar.innerHTML = calendarHTML;
        }

        let currentCalendarMonth = new Date().getMonth();
        let currentCalendarYear = new Date().getFullYear();

        function changeMonth(direction) {
            currentCalendarMonth += direction;
            if (currentCalendarMonth > 11) {
                currentCalendarMonth = 0;
                currentCalendarYear++;
            } else if (currentCalendarMonth < 0) {
                currentCalendarMonth = 11;
                currentCalendarYear--;
            }
            generateCalendar(currentCalendarMonth, currentCalendarYear);
        }

        function selectDate(dateString) {
            const dateArrivee = document.getElementById('dateArrivee');
            const dateDepart = document.getElementById('dateDepart');

            if (!dateArrivee.value) {
                dateArrivee.value = dateString;
            } else if (!dateDepart.value && new Date(dateString) > new Date(dateArrivee.value)) {
                dateDepart.value = dateString;
            } else {
                // Reset et recommencer
                dateArrivee.value = dateString;
                dateDepart.value = '';
            }

            updateReservationSummary();
        }

        function setupDateValidation() {
            const dateArrivee = document.getElementById('dateArrivee');
            const dateDepart = document.getElementById('dateDepart');
            const today = new Date().toISOString().split('T')[0];

            dateArrivee.min = today;
            dateDepart.min = today;

            dateArrivee.addEventListener('change', function() {
                if (this.value) {
                    const nextDay = new Date(this.value);
                    nextDay.setDate(nextDay.getDate() + 1);
                    dateDepart.min = nextDay.toISOString().split('T')[0];

                    if (dateDepart.value && new Date(dateDepart.value) <= new Date(this.value)) {
                        dateDepart.value = '';
                    }
                }
                updateReservationSummary();
            });

            dateDepart.addEventListener('change', updateReservationSummary);
        }

        function setupReservationCalculation() {
            const form = document.getElementById('reservationForm');
            const submitButton = form.querySelector('button[type="submit"]');

            form.addEventListener('input', function() {
                const dateArrivee = document.getElementById('dateArrivee').value;
                const dateDepart = document.getElementById('dateDepart').value;
                const nombrePersonnes = form.querySelector('select[name="nombrePersonnes"]').value;

                const isValid = dateArrivee && dateDepart && nombrePersonnes;
                submitButton.disabled = !isValid;

                if (isValid) {
                    submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
                } else {
                    submitButton.classList.add('opacity-50', 'cursor-not-allowed');
                }
            });

            form.addEventListener('submit', function(e) {
                e.preventDefault();

                const formData = new FormData(form);
                const reservationData = Object.fromEntries(formData);

                // Ici vous pouvez rediriger vers la page de réservation
                console.log('Données de réservation:', reservationData);
                alert('Redirection vers la page de réservation...');
                // window.location.href = '/Reservation/Create?' + new URLSearchParams(reservationData);
            });
        }

        function updateReservationSummary() {
            const dateArrivee = document.getElementById('dateArrivee').value;
            const dateDepart = document.getElementById('dateDepart').value;
            const summary = document.getElementById('reservationSummary');

            if (dateArrivee && dateDepart) {
                const arrivee = new Date(dateArrivee);
                const depart = new Date(dateDepart);
                const diffTime = Math.abs(depart - arrivee);
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                if (diffDays > 0) {
                    const total = diffDays * prixParNuit;

                    document.getElementById('nombreNuits').textContent = diffDays + (diffDays === 1 ? ' nuit' : ' nuits');
                    document.getElementById('prixTotal').textContent = total.toLocaleString('fr-FR', {
                        style: 'currency',
                        currency: 'EUR'
                    });

                    summary.classList.remove('hidden');
                } else {
                    summary.classList.add('hidden');
                }
            } else {
                summary.classList.add('hidden');
            }
        }
    </script>
}